Return IfSearch::writeOutputImage(QPair<QString,DetectorResult> face,
                                  int consistency,
                                  QImage normImage,
                                  const EigenFaceSearchResultList & resList)
{
    static int pos[] = { 0, 1, 2, 3, 7, 11, 15, 14, 13, 12, 8, 4 };

    QImage outputImage(normImage.size() * 2, normImage.format());
    outputImage.fill(Qt::black);
    ImageMarker outputMarker(&outputImage);
    QSize thumbSize = normImage.size() / 2;

    QColor consistencyColor = optMarkBadFaceColor->value<QColor>();
    if ( ! consistencyColor.isValid()) consistencyColor = Qt::green;
    ImageMarker normMarker(&normImage);
    normMarker.title(tr("C%1 %2").arg(consistency).arg(face.first));
    normMarker.score(consistency, 6, Qt::black, Qt::white, consistencyColor);
    normMarker.eyes(eigenFace->normalEyes());
    normMarker.end();
    outputMarker.drawImage(QPoint(thumbSize.width(), thumbSize.height()), normImage);

    int i = 0;
    foreach (EigenFaceSearchPerson res, resList)
    {
        if (i > 11)
            break;
        QImage enrolledNormImage = faceBase->enrolledImage(res.bestFaceKey())
                .convertToFormat(QImage::Format_RGB32);
        if ( ! enrolledNormImage.isNull())
        {
            QImage thumbImage = enrolledNormImage.scaled(thumbSize, Qt::KeepAspectRatio);
            ImageMarker thumbMarker(&thumbImage);
            QString id = faceBase->personId(res.getPersonKey());
            if (id.isEmpty())
                id = faceBase->faceId(res.bestFaceKey());
            thumbMarker.title(tr("M%1%3 %2")
                              .arg(res.getConfidence())
                              .arg(id)
                              .arg(res.getTier().indicator()));
            thumbMarker.score(res.getConfidence(), 4, res.getTier().color(),
                              Qt::white, Qt::black);
            thumbMarker.end();
            outputMarker.drawImage(QPoint(pos[i] % 4 * thumbSize.width(),
                                          pos[i] / 4 * thumbSize.height()), thumbImage);
        }
        ++i;
    }
    outputMarker.end();
    RETURN(fwpImage->write(outputImage, idGenerator.face("Image")));
    return Return();
} // writeOutputImage()
